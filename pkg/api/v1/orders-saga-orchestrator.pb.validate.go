// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: orders-saga-orchestrator.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SagaStep with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SagaStep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SagaStep with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SagaStepMultiError, or nil
// if none found.
func (m *SagaStep) ValidateAll() error {
	return m.validate(true)
}

func (m *SagaStep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := SagaStepValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return SagaStepMultiError(errors)
	}

	return nil
}

// SagaStepMultiError is an error wrapping multiple validation errors returned
// by SagaStep.ValidateAll() if the designated constraints aren't met.
type SagaStepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SagaStepMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SagaStepMultiError) AllErrors() []error { return m }

// SagaStepValidationError is the validation error returned by
// SagaStep.Validate if the designated constraints aren't met.
type SagaStepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SagaStepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SagaStepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SagaStepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SagaStepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SagaStepValidationError) ErrorName() string { return "SagaStepValidationError" }

// Error satisfies the builtin error interface
func (e SagaStepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSagaStep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SagaStepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SagaStepValidationError{}

// Validate checks the field values on OrderSaga with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderSaga) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderSaga with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderSagaMultiError, or nil
// if none found.
func (m *OrderSaga) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderSaga) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := OrderSagaValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOrderId() <= 0 {
		err := OrderSagaValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	for idx, item := range m.GetSteps() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrderSagaValidationError{
						field:  fmt.Sprintf("Steps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrderSagaValidationError{
						field:  fmt.Sprintf("Steps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrderSagaValidationError{
					field:  fmt.Sprintf("Steps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OrderSagaMultiError(errors)
	}

	return nil
}

// OrderSagaMultiError is an error wrapping multiple validation errors returned
// by OrderSaga.ValidateAll() if the designated constraints aren't met.
type OrderSagaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderSagaMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderSagaMultiError) AllErrors() []error { return m }

// OrderSagaValidationError is the validation error returned by
// OrderSaga.Validate if the designated constraints aren't met.
type OrderSagaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderSagaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderSagaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderSagaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderSagaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderSagaValidationError) ErrorName() string { return "OrderSagaValidationError" }

// Error satisfies the builtin error interface
func (e OrderSagaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderSaga.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderSagaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderSagaValidationError{}

// Validate checks the field values on GetOrderSagaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrderSagaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderSagaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderSagaRequestMultiError, or nil if none found.
func (m *GetOrderSagaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderSagaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderId() <= 0 {
		err := GetOrderSagaRequestValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOrderSagaRequestMultiError(errors)
	}

	return nil
}

// GetOrderSagaRequestMultiError is an error wrapping multiple validation
// errors returned by GetOrderSagaRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOrderSagaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderSagaRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderSagaRequestMultiError) AllErrors() []error { return m }

// GetOrderSagaRequestValidationError is the validation error returned by
// GetOrderSagaRequest.Validate if the designated constraints aren't met.
type GetOrderSagaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderSagaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderSagaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderSagaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderSagaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderSagaRequestValidationError) ErrorName() string {
	return "GetOrderSagaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderSagaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderSagaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderSagaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderSagaRequestValidationError{}

// Validate checks the field values on GetOrderSagaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrderSagaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderSagaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderSagaResponseMultiError, or nil if none found.
func (m *GetOrderSagaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderSagaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSaga()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrderSagaResponseValidationError{
					field:  "Saga",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrderSagaResponseValidationError{
					field:  "Saga",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSaga()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrderSagaResponseValidationError{
				field:  "Saga",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrderSagaResponseMultiError(errors)
	}

	return nil
}

// GetOrderSagaResponseMultiError is an error wrapping multiple validation
// errors returned by GetOrderSagaResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOrderSagaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderSagaResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderSagaResponseMultiError) AllErrors() []error { return m }

// GetOrderSagaResponseValidationError is the validation error returned by
// GetOrderSagaResponse.Validate if the designated constraints aren't met.
type GetOrderSagaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderSagaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderSagaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderSagaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderSagaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderSagaResponseValidationError) ErrorName() string {
	return "GetOrderSagaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderSagaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderSagaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderSagaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderSagaResponseValidationError{}
